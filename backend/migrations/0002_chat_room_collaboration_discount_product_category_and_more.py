# Generated by Django 4.0.1 on 2022-01-30 23:15

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Chat_Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='Unnamed-Secure-Room')),
                ('desc', models.TextField(default='Why was this room created?')),
                ('rules', models.TextField(default='Follow the rules else create your own room')),
                ('type_of_room', models.TextField(choices=[('CLOSED-SECURE-ROOM', 'CLOSED-SECURE-ROOM'), ('OPEN-SECURE-ROOM', 'OPEN-SECURE-ROOM'), ('INITIATE-ROOM-TERMINATION', 'INITIATE-ROOM-TERMINATION')])),
                ('created_on', models.DateField()),
                ('modified_on', models.DateTimeField()),
                ('is_room_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Collaboration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collab_name', models.TextField(default='Your campaign definition')),
                ('collab_desc', models.TextField(default='Describe your campaign')),
                ('collab_type', models.TextField(choices=[('FIXED-PAYMENT', 'FIXED-PAYMENT'), ('BARTER-DEAL', 'BARTER-DEAL'), ('COMMISSION-%-ON-SALES', 'COMMISSION-%-ON-SALES'), ('FREE-HELP-FROM-THE-COMMUNITY', 'FREE-HELP-FROM-THE-COMMUNITY')])),
                ('collab_status', models.BooleanField(default=False)),
                ('creator_pitch', models.TextField()),
                ('bid_type', models.TextField(choices=[('FIXED-PAYMENT', 'FIXED-PAYMENT'), ('BARTER-DEAL', 'BARTER-DEAL'), ('COMMISSION-%-ON-SALES', 'COMMISSION-%-ON-SALES'), ('FREE-HELP-FROM-THE-COMMUNITY', 'FREE-HELP-FROM-THE-COMMUNITY')])),
                ('bid_amount', models.FloatField(default=0.0)),
                ('accept_bid', models.BooleanField(default=False)),
                ('created_at', models.DateField()),
                ('modified_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount_name', models.TextField()),
                ('discount_desc', models.TextField()),
                ('disocunt_percent', models.FloatField(default=0.0)),
                ('active_status', models.BooleanField(default=False)),
                ('created_at', models.DateField()),
                ('modified_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Product_Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.TextField(choices=[('SHIRTS', 'SHIRTS'), ('BOTTOMS', 'BOTTOMS'), ('SNEAKERS', 'SNEAKERS'), ('THERMALS', 'THERMALS'), ('SHORTS', 'SHORTS'), ('HOME-DECOR', 'HOME-DECOR'), ('DIGITAL-ART', 'DIGITAL-ART'), ('MUSIC-FILE', 'MUSIC-FILE'), ('COLLECTIBLES', 'COLLECTIBLES'), ('PHYSICAL-ACCESSORIES', 'PHYSICAL-ACCESSORIES'), ('DIGITAL-ACCESSORIES', 'DIGITAL-ACCESSORIES'), ('POTRAIT-VIDEO-FILE', 'POTRAIT-VIDEO-FILE')])),
                ('category_desc', models.TextField(default='Describe your creation.')),
                ('created_at', models.DateField()),
                ('modified_at', models.DateTimeField()),
                ('category_image1', models.FileField(upload_to='category/category_image1')),
                ('category_image2', models.FileField(upload_to='category/category_image2')),
                ('category_image3', models.FileField(upload_to='category/category_image3')),
            ],
        ),
        migrations.CreateModel(
            name='Product_Themes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_name', models.TextField(default='Collection Name')),
                ('collection_desc', models.TextField(default='Collection Decsription')),
                ('audience_traits', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=10)),
                ('marketing_funnel', models.TextField(choices=[('Community', 'Creator-Community'), ('Performance-ADs', 'Performance-ADs-IG/FB'), ('Influencer-Marketing', 'Influencer-Marketing')])),
                ('created_at', models.DateField()),
                ('modified_at', models.DateTimeField()),
            ],
        ),
        migrations.RenameField(
            model_name='user_payment',
            old_name='total_money_spent',
            new_name='total_money_in',
        ),
        migrations.AddField(
            model_name='metauser',
            name='hashkey',
            field=models.TextField(default='42a3951dcf668b0e2c95a90f2d175989164e9c0777b0afd8f02627d75e8cfb2fc544c997eb9207afdb8887dd7be739c321c16be8ca2b49500e84c264ffe071f9', unique=True),
        ),
        migrations.AddField(
            model_name='user_payment',
            name='total_money_out',
            field=models.FloatField(default=0.0),
        ),
        migrations.AddField(
            model_name='user_payment',
            name='user_payment_profile_status',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='metauser',
            name='email',
            field=models.EmailField(default='you@you.com', max_length=254),
        ),
        migrations.AlterField(
            model_name='metauser',
            name='first_name',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='metauser',
            name='last_name',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='metauser',
            name='meta_username',
            field=models.TextField(default='username_not_defined', unique=True),
        ),
        migrations.AlterField(
            model_name='metauser',
            name='password',
            field=models.TextField(unique=True),
        ),
        migrations.AlterField(
            model_name='user_address',
            name='address_line1',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='user_address',
            name='address_line2',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='user_address',
            name='address_state',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='user_address',
            name='cell_phone',
            field=models.TextField(default='0000'),
        ),
        migrations.AlterField(
            model_name='user_address',
            name='city',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='user_address',
            name='country',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='user_address',
            name='planet',
            field=models.TextField(default='Earth'),
        ),
        migrations.AlterField(
            model_name='user_address',
            name='postal_code',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='user_payment',
            name='payment_provider',
            field=models.TextField(default='STRIPE'),
        ),
        migrations.AlterField(
            model_name='user_payment',
            name='payment_type',
            field=models.TextField(default='Credit / Debit Card'),
        ),
        migrations.AlterField(
            model_name='user_type',
            name='digital_base_personality',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=8),
        ),
        migrations.AlterField(
            model_name='user_type',
            name='digital_future_personality',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=8),
        ),
        migrations.AlterField(
            model_name='user_type',
            name='human_race',
            field=models.TextField(default='Libyan'),
        ),
        migrations.AlterField(
            model_name='user_type',
            name='login_password',
            field=models.TextField(default='¯J@\n,ëyc¤$ÙÏ7y\x17\\\x8d%\x8f¬ø£\x1eè¼\x19IÜ\x06\x0e\x10æ'),
        ),
        migrations.AlterField(
            model_name='user_type',
            name='user_role',
            field=models.TextField(default='User'),
        ),
        migrations.CreateModel(
            name='Social',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('following', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=30)),
                ('followers', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=30)),
                ('profileprivate', models.BooleanField(default=False)),
                ('saved_content', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=500)),
                ('likes', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=200)),
                ('comments', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=200)),
                ('products_clickedOn', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=500)),
                ('bio', models.TextField()),
                ('blocked_list', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=200)),
                ('data_mining_status', models.BooleanField(default=False)),
                ('account_active', models.BooleanField(default=True)),
                ('delete_metauser', models.BooleanField(default=False)),
                ('created_on', models.DateField()),
                ('modified_on', models.DateTimeField()),
                ('user_ID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='backend.metauser')),
            ],
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('all_products', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=200)),
                ('all_user_data', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=100)),
                ('shop_name', models.TextField(default='Use your username as shop name?')),
                ('shop_desc', models.TextField()),
                ('shop_traits', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=50)),
                ('assistance_ask', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=20)),
                ('uniquesellingprop', models.TextField(default='Why your meta-shop is special than others?')),
                ('user_ID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='backend.metauser')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='No Product Name, yet', unique=True)),
                ('desc', models.TextField(default='Explain your creation in great poetic detail.')),
                ('sku', models.TextField(default='Give it a serial number ex: SNKRS-NKE-WMN-AJ12-7.5?')),
                ('has_multiple_variants', models.BooleanField(default=False)),
                ('price_size', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(default='Size 0 Price 0'), size=None)),
                ('total_sales', models.FloatField(default=0.0)),
                ('clicks_on_product', models.IntegerField(verbose_name=1)),
                ('is_product_digital', models.BooleanField(default=False)),
                ('is_product_sharable', models.BooleanField(default=False)),
                ('product_unique_traits', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=15)),
                ('customer_unique_traits', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=15)),
                ('nsfw_content', models.BooleanField(default=False)),
                ('production_cost', models.FloatField(default=0.0)),
                ('production_time_days', models.IntegerField()),
                ('hours_invested', models.FloatField(default=1.0)),
                ('encrypt_product', models.BooleanField(default=False)),
                ('product_active', models.BooleanField(default=False)),
                ('product_hidden', models.BooleanField(default=True)),
                ('unit_sold_expectation', models.IntegerField(default=0)),
                ('size_chart', models.FileField(upload_to='product/size_chart')),
                ('product_image1', models.FileField(upload_to='product/product_image1')),
                ('product_image2', models.FileField(upload_to='product/product_image2')),
                ('product_image3', models.FileField(upload_to='product/product_image3')),
                ('hashkey', models.TextField(default='e8a4da625fdd744bf312e502b0e59925ac7b32ba', unique=True)),
                ('created_at', models.DateField()),
                ('modified_at', models.DateTimeField()),
                ('collaborationID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.collaboration')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.metauser')),
                ('discount_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.discount')),
                ('product_categoryID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.product_category')),
                ('product_themesID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.product_themes')),
                ('shop_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.shop')),
            ],
        ),
        migrations.CreateModel(
            name='Particpants',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chat_room_ID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='backend.chat_room')),
                ('user_ID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='backend.metauser')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_body', models.TextField()),
                ('upload_file', models.FileField(upload_to='user_meta_key/message/files')),
                ('created_at', models.DateField()),
                ('modified_at', models.DateTimeField()),
                ('hashkey', models.TextField(default='96b9f3dfe8250747a1e6a42066a42e79cf56f3899d1ed368c6f97dffbbcf08ad', unique=True)),
                ('chat_room_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.chat_room')),
                ('user_ID', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='backend.metauser')),
            ],
        ),
        migrations.AddField(
            model_name='discount',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.metauser'),
        ),
        migrations.AddField(
            model_name='collaboration',
            name='user_ID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='backend.metauser'),
        ),
    ]
